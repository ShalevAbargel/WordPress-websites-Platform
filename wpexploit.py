# Nethanel Gelernter (c)
from contentInjectionexploit import ContentInjectionExploit
from denialofserviceexploit import DenialOfServicePoCExploit


class WPExploit(object):

    def __init__(self, domain, additional_data=None, proxies=None):
        """
        Keep state of data that is collected and tries that were performed for efficieny
        :param domain:
        :param additional_data: data that might be useful for performing the bruteforce (e.g., login page URL)
        :param proxies: working via HTTP proxies
        """
        try:
            self._domain = domain
            self._exploit_method = 1
            if additional_data is None:
                self._exploit = ContentInjectionExploit(domain)
            else:
                if additional_data[0] == 1:
                    self._exploit = ContentInjectionExploit(domain, additional_data, proxies)
                elif additional_data[0] == 2:
                    self._exploit_method = 2
                    self._exploit = DenialOfServicePoCExploit(domain, additional_data, proxies)
                else:
                    print('error with additional data - please select the exploit method properly')
        except Exception as e:
            print(e)

    def plugin_name(self):
        """
        :return: the vulnerable plugin's name
        """
        return self._exploit.plugin_name()

    def vulnerable_versions(self):
        """
        :return: string the describes the ranges of vulnerable methods
        """
        return self._exploit.vulnerable_versions()

    def is_vulnerable_version(self, version_str):
        """
        :param version_str: X.Y.Z....
        :return: Whether the version is vulnerable or not
        """
        return self._exploit.is_vulnerable_version(version_str)

    def get_references(self):
        """
        :return: list of URLs for data about the exploit & vulnerability (where did you find the data?)
        """
        return self._exploit.get_references()

    def is_vulnerable(self, data=None, proxies=None):
        """
        Test whether vulnerable or not. If many requests or suspicious requests might be sent, consider adding
        aggresive parameter
        :param data: dictionary with data that can be used for the method
        :param proxies: working via HTTP proxies. If None, the constructor's proxies are used (if any)
        :return: Boolean - whether domain is vulnerable or not
        """
        try:
            return self._exploit.is_vulnerable()
        except Exception as e:
            print(e)

    def exploit(self, data=None, proxies=None):
        """
        If possible to exploit (E.g., in server-side vulns) - exploit
        In client-side, return the exploit code to use
        :param data: dictionary with data that can be used for the method
        :param proxies: working via HTTP proxies. If None, the constructor's proxies are used (if any)
        :return: Boolean - success or not
        """
        try:
            return self._exploit.exploit()
        except:
            print('error in exploit method, please check your additional data')

